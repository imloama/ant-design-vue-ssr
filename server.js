const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const favicon = require('serve-favicon')
// const compression = require('compression')
// const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = true;// process.env.NODE_ENV === 'production'
// const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `fastify/${require('fastify/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const fastify = require('fastify')({
  logger: true
})
  

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: new LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
// let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    cache: new LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  // readyPromise = require('./build/setup-dev-server')(
  //   app,
  //   templatePath,
  //   (bundle, options) => {
  //     renderer = createRenderer(bundle, options)
  //   }
  // )
}

// fastify.register(require('fastify-static'), {
//   root: resolve('./public'),
//   prefix: '/public/', // optional: default '/'
// })

fastify.register(require('fastify-static'), {
  root: resolve('./dist'),
  prefix: '/', // optional: default '/'
})

fastify.use(favicon('./public/favicon.ico'))

function render (request, reply) {
  const req = request.req
  const s = Date.now()

  reply.header('Content-Type', 'text/html; charset=utf-8')
  reply.header("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      reply.redirect(err.url)
    } else if(err.code === 404) {
      reply.code(404)
      reply.send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      reply.code(500)
      reply.send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'ant design vue ssr', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    reply.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

// fastify.get('*', isProd ? render : (req, res) => {
//   readyPromise.then(() => render(req, res))
// })

fastify.get('*', render)

const port = process.env.PORT || 3000
fastify.listen(port, (err, address) => {
  if (err) throw err
  fastify.log.info(`server listening on ${address}`)
})